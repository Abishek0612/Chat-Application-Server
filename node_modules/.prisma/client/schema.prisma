generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  firstName String
  lastName  String?
  avatar    String?
  bio       String?
  phone     String?
  password  String?
  isOnline  Boolean  @default(false)
  lastSeen  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  googleId String? @unique
  provider String  @default("local")

  sentMessages     Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")

  chatMembers  ChatMember[]
  createdChats Chat[]       @relation("ChatCreator")

  @@map("users")
}

model Chat {
  id          String   @id @default(cuid())
  name        String?
  isGroup     Boolean  @default(false)
  avatar      String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creatorId String
  creator   User   @relation("ChatCreator", fields: [creatorId], references: [id])

  members  ChatMember[]
  messages Message[]

  @@map("chats")
}

model ChatMember {
  id       String   @id @default(cuid())
  userId   String
  chatId   String
  role     String   @default("MEMBER")
  joinedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId])
  @@map("chat_members")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  type      String   @default("TEXT")
  fileUrl   String?
  fileName  String?
  fileSize  Int?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  senderId   String
  receiverId String?
  chatId     String

  sender   User  @relation("MessageSender", fields: [senderId], references: [id])
  receiver User? @relation("MessageReceiver", fields: [receiverId], references: [id])
  chat     Chat  @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@map("messages")
}
